/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var chain_pb = require('./chain_pb.js');
goog.exportSymbol('proto.monitor.AlertStatus', null, global);
goog.exportSymbol('proto.monitor.BumoStatus', null, global);
goog.exportSymbol('proto.monitor.CPU', null, global);
goog.exportSymbol('proto.monitor.GlueManager', null, global);
goog.exportSymbol('proto.monitor.Hello', null, global);
goog.exportSymbol('proto.monitor.LedgerStatus', null, global);
goog.exportSymbol('proto.monitor.MONITOR_MESSAGE_TYPE', null, global);
goog.exportSymbol('proto.monitor.Partition', null, global);
goog.exportSymbol('proto.monitor.Peer', null, global);
goog.exportSymbol('proto.monitor.PeerManager', null, global);
goog.exportSymbol('proto.monitor.Register', null, global);
goog.exportSymbol('proto.monitor.SystemProperty', null, global);
goog.exportSymbol('proto.monitor.SystemResource', null, global);
goog.exportSymbol('proto.monitor.SystemStatus', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.Hello = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.Hello, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.monitor.Hello.displayName = 'proto.monitor.Hello';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.Hello.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.Hello.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.Hello} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.Hello.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    connectionTimeout: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.Hello}
 */
proto.monitor.Hello.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.Hello;
  return proto.monitor.Hello.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.Hello} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.Hello}
 */
proto.monitor.Hello.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServiceVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConnectionTimeout(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.Hello.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.Hello.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.Hello} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.Hello.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceVersion();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getConnectionTimeout();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 service_version = 1;
 * @return {number}
 */
proto.monitor.Hello.prototype.getServiceVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.monitor.Hello.prototype.setServiceVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 connection_timeout = 2;
 * @return {number}
 */
proto.monitor.Hello.prototype.getConnectionTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.monitor.Hello.prototype.setConnectionTimeout = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.monitor.Hello.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.monitor.Hello.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.Register = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.Register, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.monitor.Register.displayName = 'proto.monitor.Register';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.Register.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.Register.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.Register} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.Register.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    blockchainVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dataVersion: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.Register}
 */
proto.monitor.Register.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.Register;
  return proto.monitor.Register.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.Register} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.Register}
 */
proto.monitor.Register.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockchainVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDataVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.Register.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.Register.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.Register} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.Register.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBlockchainVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDataVersion();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.monitor.Register.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.monitor.Register.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string blockchain_version = 2;
 * @return {string}
 */
proto.monitor.Register.prototype.getBlockchainVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.monitor.Register.prototype.setBlockchainVersion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 data_version = 3;
 * @return {number}
 */
proto.monitor.Register.prototype.getDataVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.monitor.Register.prototype.setDataVersion = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.monitor.Register.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.monitor.Register.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.Peer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.Peer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.monitor.Peer.displayName = 'proto.monitor.Peer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.Peer.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.Peer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.Peer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.Peer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    delay: jspb.Message.getFieldWithDefault(msg, 2, 0),
    active: jspb.Message.getFieldWithDefault(msg, 3, false),
    ipAddress: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.Peer}
 */
proto.monitor.Peer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.Peer;
  return proto.monitor.Peer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.Peer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.Peer}
 */
proto.monitor.Peer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDelay(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.Peer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.Peer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.Peer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.Peer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDelay();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIpAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.monitor.Peer.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.monitor.Peer.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 delay = 2;
 * @return {number}
 */
proto.monitor.Peer.prototype.getDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.monitor.Peer.prototype.setDelay = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool active = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.monitor.Peer.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.monitor.Peer.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string ip_address = 4;
 * @return {string}
 */
proto.monitor.Peer.prototype.getIpAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.monitor.Peer.prototype.setIpAddress = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.GlueManager = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.GlueManager, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.monitor.GlueManager.displayName = 'proto.monitor.GlueManager';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.GlueManager.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.GlueManager.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.GlueManager} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.GlueManager.toObject = function(includeInstance, msg) {
  var f, obj = {
    systemCurrentTime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    processUptime: jspb.Message.getFieldWithDefault(msg, 2, ""),
    systemUptime: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.GlueManager}
 */
proto.monitor.GlueManager.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.GlueManager;
  return proto.monitor.GlueManager.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.GlueManager} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.GlueManager}
 */
proto.monitor.GlueManager.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemCurrentTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessUptime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemUptime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.GlueManager.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.GlueManager.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.GlueManager} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.GlueManager.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystemCurrentTime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProcessUptime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSystemUptime();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string system_current_time = 1;
 * @return {string}
 */
proto.monitor.GlueManager.prototype.getSystemCurrentTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.monitor.GlueManager.prototype.setSystemCurrentTime = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string process_uptime = 2;
 * @return {string}
 */
proto.monitor.GlueManager.prototype.getProcessUptime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.monitor.GlueManager.prototype.setProcessUptime = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string system_uptime = 3;
 * @return {string}
 */
proto.monitor.GlueManager.prototype.getSystemUptime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.monitor.GlueManager.prototype.setSystemUptime = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.PeerManager = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.monitor.PeerManager.repeatedFields_, null);
};
goog.inherits(proto.monitor.PeerManager, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.monitor.PeerManager.displayName = 'proto.monitor.PeerManager';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.monitor.PeerManager.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.PeerManager.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.PeerManager.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.PeerManager} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.PeerManager.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    peerList: jspb.Message.toObjectList(msg.getPeerList(),
    proto.monitor.Peer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.PeerManager}
 */
proto.monitor.PeerManager.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.PeerManager;
  return proto.monitor.PeerManager.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.PeerManager} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.PeerManager}
 */
proto.monitor.PeerManager.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerId(value);
      break;
    case 2:
      var value = new proto.monitor.Peer;
      reader.readMessage(value,proto.monitor.Peer.deserializeBinaryFromReader);
      msg.addPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.PeerManager.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.PeerManager.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.PeerManager} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.PeerManager.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPeerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.monitor.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * optional string peer_id = 1;
 * @return {string}
 */
proto.monitor.PeerManager.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.monitor.PeerManager.prototype.setPeerId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Peer peer = 2;
 * @return {!Array.<!proto.monitor.Peer>}
 */
proto.monitor.PeerManager.prototype.getPeerList = function() {
  return /** @type{!Array.<!proto.monitor.Peer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.monitor.Peer, 2));
};


/** @param {!Array.<!proto.monitor.Peer>} value */
proto.monitor.PeerManager.prototype.setPeerList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.monitor.Peer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.monitor.Peer}
 */
proto.monitor.PeerManager.prototype.addPeer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.monitor.Peer, opt_index);
};


proto.monitor.PeerManager.prototype.clearPeerList = function() {
  this.setPeerList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.BumoStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.BumoStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.monitor.BumoStatus.displayName = 'proto.monitor.BumoStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.BumoStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.BumoStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.BumoStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.BumoStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    glueManager: (f = msg.getGlueManager()) && proto.monitor.GlueManager.toObject(includeInstance, f),
    peerManager: (f = msg.getPeerManager()) && proto.monitor.PeerManager.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.BumoStatus}
 */
proto.monitor.BumoStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.BumoStatus;
  return proto.monitor.BumoStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.BumoStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.BumoStatus}
 */
proto.monitor.BumoStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.monitor.GlueManager;
      reader.readMessage(value,proto.monitor.GlueManager.deserializeBinaryFromReader);
      msg.setGlueManager(value);
      break;
    case 2:
      var value = new proto.monitor.PeerManager;
      reader.readMessage(value,proto.monitor.PeerManager.deserializeBinaryFromReader);
      msg.setPeerManager(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.BumoStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.BumoStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.BumoStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.BumoStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGlueManager();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.monitor.GlueManager.serializeBinaryToWriter
    );
  }
  f = message.getPeerManager();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.monitor.PeerManager.serializeBinaryToWriter
    );
  }
};


/**
 * optional GlueManager glue_manager = 1;
 * @return {?proto.monitor.GlueManager}
 */
proto.monitor.BumoStatus.prototype.getGlueManager = function() {
  return /** @type{?proto.monitor.GlueManager} */ (
    jspb.Message.getWrapperField(this, proto.monitor.GlueManager, 1));
};


/** @param {?proto.monitor.GlueManager|undefined} value */
proto.monitor.BumoStatus.prototype.setGlueManager = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.monitor.BumoStatus.prototype.clearGlueManager = function() {
  this.setGlueManager(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.monitor.BumoStatus.prototype.hasGlueManager = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PeerManager peer_manager = 2;
 * @return {?proto.monitor.PeerManager}
 */
proto.monitor.BumoStatus.prototype.getPeerManager = function() {
  return /** @type{?proto.monitor.PeerManager} */ (
    jspb.Message.getWrapperField(this, proto.monitor.PeerManager, 2));
};


/** @param {?proto.monitor.PeerManager|undefined} value */
proto.monitor.BumoStatus.prototype.setPeerManager = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.monitor.BumoStatus.prototype.clearPeerManager = function() {
  this.setPeerManager(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.monitor.BumoStatus.prototype.hasPeerManager = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.LedgerStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.LedgerStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.monitor.LedgerStatus.displayName = 'proto.monitor.LedgerStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.LedgerStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.LedgerStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.LedgerStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.LedgerStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    ledgerHeader: (f = msg.getLedgerHeader()) && chain_pb.LedgerHeader.toObject(includeInstance, f),
    transactionSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    accountCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.LedgerStatus}
 */
proto.monitor.LedgerStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.LedgerStatus;
  return proto.monitor.LedgerStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.LedgerStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.LedgerStatus}
 */
proto.monitor.LedgerStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chain_pb.LedgerHeader;
      reader.readMessage(value,chain_pb.LedgerHeader.deserializeBinaryFromReader);
      msg.setLedgerHeader(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTransactionSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.LedgerStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.LedgerStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.LedgerStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.LedgerStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLedgerHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chain_pb.LedgerHeader.serializeBinaryToWriter
    );
  }
  f = message.getTransactionSize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getAccountCount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional protocol.LedgerHeader ledger_header = 1;
 * @return {?proto.protocol.LedgerHeader}
 */
proto.monitor.LedgerStatus.prototype.getLedgerHeader = function() {
  return /** @type{?proto.protocol.LedgerHeader} */ (
    jspb.Message.getWrapperField(this, chain_pb.LedgerHeader, 1));
};


/** @param {?proto.protocol.LedgerHeader|undefined} value */
proto.monitor.LedgerStatus.prototype.setLedgerHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.monitor.LedgerStatus.prototype.clearLedgerHeader = function() {
  this.setLedgerHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.monitor.LedgerStatus.prototype.hasLedgerHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 transaction_size = 2;
 * @return {number}
 */
proto.monitor.LedgerStatus.prototype.getTransactionSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.monitor.LedgerStatus.prototype.setTransactionSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 account_count = 3;
 * @return {number}
 */
proto.monitor.LedgerStatus.prototype.getAccountCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.monitor.LedgerStatus.prototype.setAccountCount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.monitor.LedgerStatus.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.monitor.LedgerStatus.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.SystemProperty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.SystemProperty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.monitor.SystemProperty.displayName = 'proto.monitor.SystemProperty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.SystemProperty.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.SystemProperty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.SystemProperty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.SystemProperty.toObject = function(includeInstance, msg) {
  var f, obj = {
    hostName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    osVersion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startupTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    osBit: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.SystemProperty}
 */
proto.monitor.SystemProperty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.SystemProperty;
  return proto.monitor.SystemProperty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.SystemProperty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.SystemProperty}
 */
proto.monitor.SystemProperty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartupTime(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsBit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.SystemProperty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.SystemProperty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.SystemProperty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.SystemProperty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHostName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOsVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartupTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOsBit();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string host_name = 1;
 * @return {string}
 */
proto.monitor.SystemProperty.prototype.getHostName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.monitor.SystemProperty.prototype.setHostName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string os_version = 2;
 * @return {string}
 */
proto.monitor.SystemProperty.prototype.getOsVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.monitor.SystemProperty.prototype.setOsVersion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 startup_time = 3;
 * @return {number}
 */
proto.monitor.SystemProperty.prototype.getStartupTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.monitor.SystemProperty.prototype.setStartupTime = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string os_bit = 4;
 * @return {string}
 */
proto.monitor.SystemProperty.prototype.getOsBit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.monitor.SystemProperty.prototype.setOsBit = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.SystemResource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.SystemResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.monitor.SystemResource.displayName = 'proto.monitor.SystemResource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.SystemResource.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.SystemResource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.SystemResource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.SystemResource.toObject = function(includeInstance, msg) {
  var f, obj = {
    available: jspb.Message.getFieldWithDefault(msg, 1, 0),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0),
    usedPercent: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    description: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.SystemResource}
 */
proto.monitor.SystemResource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.SystemResource;
  return proto.monitor.SystemResource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.SystemResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.SystemResource}
 */
proto.monitor.SystemResource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAvailable(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUsedPercent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.SystemResource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.SystemResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.SystemResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.SystemResource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAvailable();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUsedPercent();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 available = 1;
 * @return {number}
 */
proto.monitor.SystemResource.prototype.getAvailable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.monitor.SystemResource.prototype.setAvailable = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 total = 2;
 * @return {number}
 */
proto.monitor.SystemResource.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.monitor.SystemResource.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double used_percent = 3;
 * @return {number}
 */
proto.monitor.SystemResource.prototype.getUsedPercent = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.monitor.SystemResource.prototype.setUsedPercent = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.monitor.SystemResource.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.monitor.SystemResource.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.Partition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.monitor.Partition.repeatedFields_, null);
};
goog.inherits(proto.monitor.Partition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.monitor.Partition.displayName = 'proto.monitor.Partition';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.monitor.Partition.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.Partition.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.Partition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.Partition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.Partition.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalBytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    partitionList: jspb.Message.toObjectList(msg.getPartitionList(),
    proto.monitor.SystemResource.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.Partition}
 */
proto.monitor.Partition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.Partition;
  return proto.monitor.Partition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.Partition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.Partition}
 */
proto.monitor.Partition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalBytes(value);
      break;
    case 2:
      var value = new proto.monitor.SystemResource;
      reader.readMessage(value,proto.monitor.SystemResource.deserializeBinaryFromReader);
      msg.addPartition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.Partition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.Partition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.Partition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.Partition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalBytes();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPartitionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.monitor.SystemResource.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 total_bytes = 1;
 * @return {number}
 */
proto.monitor.Partition.prototype.getTotalBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.monitor.Partition.prototype.setTotalBytes = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated SystemResource partition = 2;
 * @return {!Array.<!proto.monitor.SystemResource>}
 */
proto.monitor.Partition.prototype.getPartitionList = function() {
  return /** @type{!Array.<!proto.monitor.SystemResource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.monitor.SystemResource, 2));
};


/** @param {!Array.<!proto.monitor.SystemResource>} value */
proto.monitor.Partition.prototype.setPartitionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.monitor.SystemResource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.monitor.SystemResource}
 */
proto.monitor.Partition.prototype.addPartition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.monitor.SystemResource, opt_index);
};


proto.monitor.Partition.prototype.clearPartitionList = function() {
  this.setPartitionList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.CPU = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.CPU, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.monitor.CPU.displayName = 'proto.monitor.CPU';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.CPU.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.CPU.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.CPU} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.CPU.toObject = function(includeInstance, msg) {
  var f, obj = {
    usedPercent: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.CPU}
 */
proto.monitor.CPU.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.CPU;
  return proto.monitor.CPU.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.CPU} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.CPU}
 */
proto.monitor.CPU.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUsedPercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.CPU.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.CPU.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.CPU} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.CPU.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsedPercent();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double used_percent = 1;
 * @return {number}
 */
proto.monitor.CPU.prototype.getUsedPercent = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.monitor.CPU.prototype.setUsedPercent = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.SystemStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.SystemStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.monitor.SystemStatus.displayName = 'proto.monitor.SystemStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.SystemStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.SystemStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.SystemStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.SystemStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    property: (f = msg.getProperty()) && proto.monitor.SystemProperty.toObject(includeInstance, f),
    memory: (f = msg.getMemory()) && proto.monitor.SystemResource.toObject(includeInstance, f),
    cpu: (f = msg.getCpu()) && proto.monitor.CPU.toObject(includeInstance, f),
    partitions: (f = msg.getPartitions()) && proto.monitor.Partition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.SystemStatus}
 */
proto.monitor.SystemStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.SystemStatus;
  return proto.monitor.SystemStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.SystemStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.SystemStatus}
 */
proto.monitor.SystemStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.monitor.SystemProperty;
      reader.readMessage(value,proto.monitor.SystemProperty.deserializeBinaryFromReader);
      msg.setProperty(value);
      break;
    case 2:
      var value = new proto.monitor.SystemResource;
      reader.readMessage(value,proto.monitor.SystemResource.deserializeBinaryFromReader);
      msg.setMemory(value);
      break;
    case 3:
      var value = new proto.monitor.CPU;
      reader.readMessage(value,proto.monitor.CPU.deserializeBinaryFromReader);
      msg.setCpu(value);
      break;
    case 4:
      var value = new proto.monitor.Partition;
      reader.readMessage(value,proto.monitor.Partition.deserializeBinaryFromReader);
      msg.setPartitions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.SystemStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.SystemStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.SystemStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.SystemStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProperty();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.monitor.SystemProperty.serializeBinaryToWriter
    );
  }
  f = message.getMemory();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.monitor.SystemResource.serializeBinaryToWriter
    );
  }
  f = message.getCpu();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.monitor.CPU.serializeBinaryToWriter
    );
  }
  f = message.getPartitions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.monitor.Partition.serializeBinaryToWriter
    );
  }
};


/**
 * optional SystemProperty property = 1;
 * @return {?proto.monitor.SystemProperty}
 */
proto.monitor.SystemStatus.prototype.getProperty = function() {
  return /** @type{?proto.monitor.SystemProperty} */ (
    jspb.Message.getWrapperField(this, proto.monitor.SystemProperty, 1));
};


/** @param {?proto.monitor.SystemProperty|undefined} value */
proto.monitor.SystemStatus.prototype.setProperty = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.monitor.SystemStatus.prototype.clearProperty = function() {
  this.setProperty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.monitor.SystemStatus.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SystemResource memory = 2;
 * @return {?proto.monitor.SystemResource}
 */
proto.monitor.SystemStatus.prototype.getMemory = function() {
  return /** @type{?proto.monitor.SystemResource} */ (
    jspb.Message.getWrapperField(this, proto.monitor.SystemResource, 2));
};


/** @param {?proto.monitor.SystemResource|undefined} value */
proto.monitor.SystemStatus.prototype.setMemory = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.monitor.SystemStatus.prototype.clearMemory = function() {
  this.setMemory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.monitor.SystemStatus.prototype.hasMemory = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CPU cpu = 3;
 * @return {?proto.monitor.CPU}
 */
proto.monitor.SystemStatus.prototype.getCpu = function() {
  return /** @type{?proto.monitor.CPU} */ (
    jspb.Message.getWrapperField(this, proto.monitor.CPU, 3));
};


/** @param {?proto.monitor.CPU|undefined} value */
proto.monitor.SystemStatus.prototype.setCpu = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.monitor.SystemStatus.prototype.clearCpu = function() {
  this.setCpu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.monitor.SystemStatus.prototype.hasCpu = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Partition partitions = 4;
 * @return {?proto.monitor.Partition}
 */
proto.monitor.SystemStatus.prototype.getPartitions = function() {
  return /** @type{?proto.monitor.Partition} */ (
    jspb.Message.getWrapperField(this, proto.monitor.Partition, 4));
};


/** @param {?proto.monitor.Partition|undefined} value */
proto.monitor.SystemStatus.prototype.setPartitions = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.monitor.SystemStatus.prototype.clearPartitions = function() {
  this.setPartitions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.monitor.SystemStatus.prototype.hasPartitions = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.AlertStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.AlertStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.monitor.AlertStatus.displayName = 'proto.monitor.AlertStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.AlertStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.AlertStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.AlertStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.AlertStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    ledgerSequence: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    system: (f = msg.getSystem()) && proto.monitor.SystemStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.AlertStatus}
 */
proto.monitor.AlertStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.AlertStatus;
  return proto.monitor.AlertStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.AlertStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.AlertStatus}
 */
proto.monitor.AlertStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLedgerSequence(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeId(value);
      break;
    case 3:
      var value = new proto.monitor.SystemStatus;
      reader.readMessage(value,proto.monitor.SystemStatus.deserializeBinaryFromReader);
      msg.setSystem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.AlertStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.AlertStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.AlertStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.AlertStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLedgerSequence();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNodeId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSystem();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.monitor.SystemStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 ledger_sequence = 1;
 * @return {number}
 */
proto.monitor.AlertStatus.prototype.getLedgerSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.monitor.AlertStatus.prototype.setLedgerSequence = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string node_id = 2;
 * @return {string}
 */
proto.monitor.AlertStatus.prototype.getNodeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.monitor.AlertStatus.prototype.setNodeId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SystemStatus system = 3;
 * @return {?proto.monitor.SystemStatus}
 */
proto.monitor.AlertStatus.prototype.getSystem = function() {
  return /** @type{?proto.monitor.SystemStatus} */ (
    jspb.Message.getWrapperField(this, proto.monitor.SystemStatus, 3));
};


/** @param {?proto.monitor.SystemStatus|undefined} value */
proto.monitor.AlertStatus.prototype.setSystem = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.monitor.AlertStatus.prototype.clearSystem = function() {
  this.setSystem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.monitor.AlertStatus.prototype.hasSystem = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.monitor.MONITOR_MESSAGE_TYPE = {
  MONITOR_MSGTYPE_NONE: 0,
  MONITOR_MSGTYPE_HELLO: 30,
  MONITOR_MSGTYPE_REGISTER: 31,
  MONITOR_MSGTYPE_BUMO: 32,
  MONITOR_MSGTYPE_LEDGER: 33,
  MONITOR_MSGTYPE_SYSTEM: 34,
  MONITOR_MSGTYPE_ALERT: 35,
  MONITOR_MSGTYPE_NOTICE: 36,
  MONITOR_MSGTYPE_ACCOUNT_EXCEPTION: 37,
  MONITOR_MSGTYPE_ERROR: 39
};

goog.object.extend(exports, proto.monitor);
